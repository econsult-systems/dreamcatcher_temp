/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * PrintPreview.java
 *
 * Created on Sep 2, 2011, 11:45:42 AM
 */
package org.dreamcatcher.main;

import java.awt.Cursor;
import java.awt.Graphics;
import java.awt.Rectangle;
import java.awt.print.PageFormat;
import java.awt.print.Printable;
import java.awt.print.PrinterException;
import java.awt.print.PrinterJob;
import javax.swing.JOptionPane;
import javax.swing.JTextPane;
import javax.swing.plaf.basic.BasicTextUI;
import javax.swing.text.BoxView;
import javax.swing.text.Element;
import javax.swing.text.View;

/**
 *
 * @author Mashok
 */
public class PrintPreview extends javax.swing.JPanel implements Printable{

    /** Creates new form PrintPreview */
    public PrintPreview() {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
       	private PrintView printView;
        JTextPane text = new JTextPane();
/////////////////////////////////
//////////PRINT METHODS//////////
/////////////////////////////////  
  	public void printData() 
	{
    	//getJMenuBar().repaint();
		
    	try 
		{
      	PrinterJob prnJob = PrinterJob.getPrinterJob();
      	prnJob.setPrintable(this);
      	if (!prnJob.printDialog())
        		return;
      	setCursor( Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
      	prnJob.print();
      	setCursor( Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
      	JOptionPane.showMessageDialog(this, "Printing completed successfully", "Info", JOptionPane.INFORMATION_MESSAGE);
    	}
		
    	catch (PrinterException e) 
		{
      	e.printStackTrace();
      	System.err.println("Printing error: "+e.toString());
    	}
  	}

  
  	public int print(Graphics pg, PageFormat pageFormat, int pageIndex) throws PrinterException 
	{
    	pg.translate((int)pageFormat.getImageableX(),(int)pageFormat.getImageableY());
    	int wPage = (int)pageFormat.getImageableWidth();
    	int hPage = (int)pageFormat.getImageableHeight();
    	pg.setClip(0, 0, wPage, hPage);

    	if (printView == null) 
		{
      	BasicTextUI btui = (BasicTextUI)text.getUI();
      	View root = btui.getRootView(text);
      	printView = new PrintView(text.getStyledDocument().getDefaultRootElement(), root, wPage, hPage);
    	}
        
    	boolean bContinue = printView.paintPage(pg, hPage, pageIndex);
    	System.gc();
        
    	if (bContinue)
      	return PAGE_EXISTS;
    	else 
		{
      	printView = null;
      	return NO_SUCH_PAGE;
    	}
  	}
	
	
	class PrintView extends BoxView
  	{
    	protected int m_firstOnPage = 0;
    	protected int m_lastOnPage = 0;
    	protected int m_pageIndex = 0;

    	public PrintView(Element elem, View root, int w, int h) 
		{
      	super(elem, Y_AXIS);
      	setParent(root);
      	setSize(w, h);
      	layout(w, h);
    	}

    	public boolean paintPage(Graphics g, int hPage, int pageIndex) 
		{
      	if (pageIndex > m_pageIndex) 
			{
        		m_firstOnPage = m_lastOnPage + 1;
        		if (m_firstOnPage >= getViewCount())
          		return false;
        		m_pageIndex = pageIndex;
      	}
			
      	int yMin = getOffset(Y_AXIS, m_firstOnPage);
      	int yMax = yMin + hPage;
      	Rectangle rc = new Rectangle();

      	for (int k = m_firstOnPage; k < getViewCount(); k++) 
			{
        		rc.x = getOffset(X_AXIS, k);
        		rc.y = getOffset(Y_AXIS, k);
        		rc.width = getSpan(X_AXIS, k);
        		rc.height = getSpan(Y_AXIS, k);
        		if (rc.y+rc.height > yMax)
          		break;
        		m_lastOnPage = k;
        		rc.y -= yMin;
        		paintChild(g, rc, k);
      	}
			
      	return true;
    	}
  	}
/////////////////////////////////////
//////////END PRINT METHODS//////////
/////////////////////////////////////




}




